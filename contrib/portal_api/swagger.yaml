# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# This is your document metadata
info:
  version: "0.0.0"
  title: Unfancy AMK Management API
  description: |
    Unfancy exposes this management API over a variety of pluggable backend
    stores. This means that wherever you keep your actual user data (Postgres,
    Redis, your homegrown service), frontends such as the developer portal can
    use the same HTTP interface to modify users and keys.
    
    If you have multiple userstore/keystore backends plugged into your API,
    Unfancy will verify keys using all of them in order. However, only one
    backend is exposed through this API.
    
    The management API administers the **first** backend plugin in your API
    configuration that supports management functions (create/delete user/keys
    etc.).

consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
  JWT:
    description: |
      [JSON Web Token](http://jwt.io)-based authentication. Once you have
      obtained a token from `/users/get_token`, set your HTTP Authorization header to:
      
      ```
      Bearer: <token string>
      ```
      
      In Swagger UI, enter the above, (including `Bearer:`) as your API key.
    type: apiKey
    name: Authorization
    in: header

security:
  - JWT: []

definitions:
  User:
    title: User
    type: object
    properties:
      id:
        type: string
        description: Unique user ID (determined by the backend store).
      name:
        type: string
      email:
        type: string
      profile:
        type: object
        description: |
          Additional profile data. The management API just passes
          this through to your backend/frontend.
  Error:
    title: Error
    type: object
    properties:
      error:
        type: string
        description: A human-readable error message.
  Quota:
    title: Quota
    type: object
    properties:
      name:
        type: string
      per_ip:
        type: object
        properties:
          max:
            type: integer
          minutes:
            type: integer
      per_key:
        type: object
        properties:
          max:
            type: integer
          minutes:
            type: integer
  Key:
    title: Key
    type: object
    properties:
      id:
        type: string
      kind:
        type: string
      extra:
        type: object
      quota:
        $ref: "#/definitions/Quota"

paths:
  /users:
    post:
      security: []
      summary: Create a new user.
      parameters:
        - name: new_user
          in: body
          required: true
          description: The user record that is to be created.
          schema:
            type: object
            required: [ name, email, profile ]
            properties:
              name:
                type: string
              email:
                type: string
              profile:
                type: object
                description: |
                  Additional profile data. The management API just passes this
                  through to your backend/frontend.
      responses:
        200:
          description: User successfully created.
          schema:
            $ref: "#/definitions/User"
        400:
          description: User creation failed.
          schema:
            $ref: "#/definitions/Error"
  /users/activate:
    get:
      security: []
      summary: Activate user (from an activation link).
      description: |
        If the backend opts into automated activation emails, the management
        API will send one out. It contains a link to this endpoint that
        activates the user. Your frontend will usually not need to deal
        with this operation.
      parameters:
        - name: activation_key
          required: true
          in: query
          type: string
          description: Activation key (autogenerated by management API).
      responses:
        200:
          description: User activated.
        403:
          description: No open activation requests with this key.
  /users/get_token:
    post:
      security: []
      summary: Get an auth token.
      description: |
        Obtain a [JSON Web Token](http://jwt.io/) for authentication. Most
        requests to the management API must be authenticated.
        
        Once you have a token, use `Bearer: <token string>` in your HTTP Authorization
        header on further requests to authenticate them.
      parameters:
        - name: token_request
          in: body
          required: true
          schema:
            type: object
            required: [ email, password ]
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: Authentication successful.
          schema:
            type: object
            properties:
              token:
                type: string
                description: The JWT as a string.
        403:
          description: Authentication failed.
          schema:
            $ref: "#/definitions/Error"
  /users/reset_password:
    post:
      security: []
      summary: Initiate a password reset.
      description: |
        This will cause an email to be sent to the user. The email contains a
        link that will actually reset the password.
      parameters:
        - name: reset_request
          in: body
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
      responses:
        200:
          description: Reset email sent.
          schema:
            type: object
            properties:
              success:
                type: string
    get:
      security: []
      summary: Complete a password reset.
      description: |
        The user actually clicks through to this endpoint from an email. It
        will reset his password and send the new password via another email.
      parameters:
        - name: reset_key
          required: true
          in: query
          description: A random verification key (included in the email link).
          type: string
      responses:
        200:
          description: Password reset, new one sent.
        403:
          description: No open password reset request with that key.
  /users/me:
    get:
      summary: Get own user profile.
      responses:
        200:
          description: Profile
          schema:
            $ref: "#/definitions/User"
    patch:
      summary: Update user profile.
      description: |
        Note that you can't change the email or unique user ID after creation.
      parameters:
        - name: profile_changes
          in: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              profile:
                type: object
              password:
                type: string
      responses:
        200:
          description: Profile updated.
          schema:
            $ref: "#/definitions/User"
  /users/me/keys:
    get:
      summary: Get own keys.
      responses:
        200:
          description: All Keys
          schema:
            type: object
            properties:
              count:
                type: integer
              keys:
                type: array
                items:
                  $ref: "#/definitions/Key"
  /quota/{key_id}:
    get:
      summary: Get live quota for a key (fast).
      description: |
        This gets the live quota from memory/Redis, so this operation is very
        fast. It is okay to poll this every few seconds or so for a live view
        of some key's quota (e.g. on a dashboard).
      parameters:
        - name: key_id
          description: ID of the key. Your authenticated user must own this key.
          required: true
          in: path
          type: string
      responses:
        200:
          description: Key Quota
          schema:
            $ref: "#/definitions/Quota"
        404:
          description: |
            No active key with that ID found, or your user doesn't own it.
        403:
          description: |
            Auth failed-- probably your token has expired. Request a new one
            before polling again if this query is part of on-going polling.
            
      
